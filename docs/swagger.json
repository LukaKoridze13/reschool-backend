{
  "openapi": "3.0.0",
  "info": {
    "title": "re:shcool API Docs",
    "version": "1.0.0",
    "description": "Learning building API documentation in re:school"
  },
  "servers": [
    {
      "description": "Local Dev Server",
      "url": "http://localhost:5500/api"
    },
    {
      "description": "Production Server",
      "url": "https://reschool-backend.onrender.com/api"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations related to user accounts"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "64d7c6c2f9b3b3b2a4c3a123" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "Doe" },
          "email": { "type": "string", "example": "john@example.com" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": { "type": "string", "example": "email" },
                "message": { "type": "string", "example": "Email already exists" }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/users": {
      "post": {
        "summary": "Register a new user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["firstName", "lastName", "email", "password"],
                "properties": {
                  "firstName": { "type": "string", "example": "John" },
                  "lastName": { "type": "string", "example": "Doe" },
                  "email": { "type": "string", "example": "john@example.com" },
                  "password": { "type": "string", "example": "Password123" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Log in user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "example": "john@example.com" },
                  "password": { "type": "string", "example": "Password123" },
                  "rememberMe": { "type": "boolean", "example": true }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login with token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string", "example": "ACCESS_TOKEN" },
                    "refreshToken": { "type": "string", "example": "REFRESH_TOKEN" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "summary": "Refresh JWT access token",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": { "type": "string", "example": "REFRESH_TOKEN" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string", "example": "NEW_ACCESS_TOKEN" },
                    "refreshToken": { "type": "string", "example": "NEW_REFRESH_TOKEN" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Invalid or expired refresh token" },
                    "error": { "type": "string", "example": "JWT expired" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current authenticated user",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Authenticated user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Invalid or expired token" }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
